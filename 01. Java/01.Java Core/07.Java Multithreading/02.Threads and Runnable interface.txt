1) Thread Lifecycle and Possible States of a Thread

A thread in Java has a specific lifecycle and can be in one of several states during its execution. The thread lifecycle consists of the following states:

-New: The thread is created but has not yet started. It's in this state when the Thread object is created but the start() method has not been called.

-Runnable: The thread is ready to run and is waiting for CPU time. After the start() method is called, the thread enters the runnable state. The thread may not be actively running but is ready to be picked by the thread scheduler.

-Blocked: A thread is blocked when it is waiting to acquire a lock or resource that is held by another thread.

-Waiting: The thread is waiting for another thread to perform a specific action. This happens when a thread calls methods like wait(), join(), or sleep().

-Timed Waiting: Similar to the waiting state, but the thread is waiting for a specific period of time. Methods like Thread.sleep(milliseconds) and Object.wait(milliseconds) put the thread in this state.

-Terminated: The thread has completed its task and exited. A thread enters this state after its run() method has finished or if an exception terminates the thread.


2) How to Start a Thread - 5 Ways

-Extending Thread class: You can create a new thread by extending the Thread class and overriding its run() method.

======================================
class MyThread extends Thread {
    public void run() {
        System.out.println("Thread is running");
    }
}

MyThread t = new MyThread();
t.start(); // Start the thread
======================================


-Implementing Runnable interface: This is more flexible than extending Thread because you can implement Runnable and pass it to a Thread object.

======================================
class MyRunnable implements Runnable {
    public void run() {
        System.out.println("Thread is running");
    }
}

Thread t = new Thread(new MyRunnable());
t.start();
======================================


-Using lambda expressions (Java 8+): With Java 8 and higher, you can use lambda expressions to create and run threads.

======================================
Thread t = new Thread(() -> System.out.println("Thread is running"));
t.start();
======================================


-Using Executors framework: The Executors framework is part of the java.util.concurrent package and allows for thread pool management.

======================================
ExecutorService executor = Executors.newFixedThreadPool(5);
executor.submit(() -> System.out.println("Thread is running"));
executor.shutdown();
======================================


-Using Timer and TimerTask: You can use the Timer class to schedule threads at a fixed rate or after a delay.

======================================
Timer timer = new Timer();
timer.schedule(new TimerTask() {
    public void run() {
        System.out.println("Thread is running");
    }
}, 1000); // Delay of 1 second
======================================

----------------------------------------------------

3) Thread Class

The Thread class in Java represents a thread of execution. This class provides the basic operations to create, start, interrupt, and manage threads. It also allows thread-related properties like priority, name, and daemon status to be configured.


4) Runnable interface

The Runnable interface is a functional interface that defines a single method run(). Any class that implements Runnable can be passed to a Thread object to create a new thread. This approach is more flexible than extending Thread since it allows a class to inherit from other classes.


5) Main Properties of Thread Object

-ID: Each thread has a unique ID, assigned when the thread is created.

-Name: The name of the thread, which can be set and retrieved. By default, threads are given names like Thread-0, Thread-1, etc.

-Priority: A thread can have a priority between Thread.MIN_PRIORITY (1) and Thread.MAX_PRIORITY (10). By default, a thread has priority Thread.NORM_PRIORITY (5).

-Daemon: A daemon thread is a background thread that terminates when all non-daemon threads finish execution. You can set a thread to be a daemon using setDaemon(true).

=========================================================
    long threadId = Thread.currentThread().getId();
    String threadName = Thread.currentThread().getName();
    int priority = Thread.currentThread().getPriority();
    boolean isDaemon = Thread.currentThread().isDaemon();
=========================================================


6) TimeUnit

The TimeUnit class provides methods for time conversions and time-based operations. For example, you can specify delays or timeouts in different units (like seconds, milliseconds, or nanoseconds).
TimeUnit.SECONDS.sleep(1); // Sleep for 1 second


7) How to interrupt a thread of execution?

You can interrupt a thread by calling its interrupt() method. This sets the thread's interrupted status and, if the thread is blocked in methods like sleep() or wait(), it throws an InterruptedException.

=========================================================
Thread t = new Thread(() -> {
    try {
        Thread.sleep(10000); // Sleep for 10 seconds
    } catch (InterruptedException e) {
        System.out.println("Thread was interrupted");
    }
});
t.start();
t.interrupt(); // Interrupt the thread
=========================================================


8) Stopping Execution: Deprecated Methods (stop(), suspend(), resume())

-stop(): Terminates the thread immediately, but this method is deprecated because it can leave shared resources in an inconsistent state.

-suspend(): Pauses the thread indefinitely. It’s deprecated because it can lead to deadlocks if not handled correctly.

-resume(): Resumes a suspended thread. It’s deprecated as it's used in conjunction with suspend().


9) interrupt() vs interrupted() vs isInterrupted()

interrupt(): Used to signal a thread that it should stop its current work. It sets the interrupted status to true.

interrupted(): A static method that checks if the current thread has been interrupted, clearing the interrupted status after being called.

isInterrupted(): Checks if the thread has been interrupted without clearing the interrupted status.


10) currentThread() method

The Thread.currentThread() method returns a reference to the currently executing thread.


11) sleep() method

The sleep(long millis) method pauses the execution of the current thread for the specified number of milliseconds. It throws InterruptedException if the thread is interrupted during sleep.


12) join() method

The join() method allows one thread to wait for the completion of another thread. For example, calling t.join() causes the current thread to wait until thread t finishes.


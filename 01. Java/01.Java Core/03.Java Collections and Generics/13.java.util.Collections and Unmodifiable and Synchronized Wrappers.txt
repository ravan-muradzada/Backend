The java.util.Collections class provides utility methods for working with collections and supports creating unmodifiable and synchronized versions of collections.

1. Unmodifiable Wrappers

These wrappers make collections read-only, so you canâ€™t modify them after creation. Any attempt to modify will throw an UnsupportedOperationException.


=======================================================

import java.util.Collections;
import java.util.HashSet;
import java.util.Set;

public class UnmodifiableSetExample {
    public static void main(String[] args) {
        Set<String> modifiableSet = new HashSet<>();
        modifiableSet.add("Apple");
        modifiableSet.add("Banana");

        Set<String> unmodifiableSet = Collections.unmodifiableSet(modifiableSet);

        System.out.println(unmodifiableSet);
        // unmodifiableSet.add("Orange");  // This line will throw UnsupportedOperationException
    }
}

=======================================================


2. Synchronized Wrappers

These wrappers provide thread safety by synchronizing the collection. All operations are locked, which makes them slower than normal collections but safe for multi-threaded access.

=======================================================

import java.util.Collections;
import java.util.HashSet;
import java.util.Set;

public class SynchronizedSetExample {
    public static void main(String[] args) {
        Set<String> set = new HashSet<>();
        set.add("Apple");
        set.add("Banana");

        Set<String> synchronizedSet = Collections.synchronizedSet(set);

        // Now this set is thread-safe
        synchronized (synchronizedSet) {
            for (String value : synchronizedSet) {
                System.out.println(value);
            }
        }
    }
}

=======================================================
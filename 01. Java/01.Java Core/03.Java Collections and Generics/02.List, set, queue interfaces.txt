The List, Set, and Queue interfaces are key subinterfaces of the Collection interface in Java. Each of these interfaces provides specialized behaviors and methods for different types of collections.

1) List interface

The List interface represents an ordered collection (also known as a sequence) that allows duplicate elements. Lists are zero-indexed, meaning the elements can be accessed by their position (index) in the list.

Its implementations are ArrayList, LinkedList, Vector and Stack.

2) Set interface

The Set interface represents a collection that does not allow duplicate elements. It models the mathematical set abstraction and is typically used when uniqueness of elements is important.
No additional methods specific to Set; it inherits all methods from the Collection interface, but its behavior is adjusted to ensure no duplicates.

Its implementations are HashSet, LinkedHashSet, TreeSet, EnumSet.

3) Queue interface:

The Queue interface represents a collection designed for holding elements prior to processing, typically following a FIFO (First-In-First-Out) order. Some queues, like PriorityQueue, order elements according to their natural ordering or a custom comparator.

Its implementations are LinkedList, PriorityQueue, ArrayDeque, ConcurrentLinkedQueue, LinkedBlockingQueue.

---------------------------------------------------------


1) List interface's own methods:

void add(int index, E element): Inserts the specified element at the specified position in the list.

E get(int index): Returns the element at the specified position in the list.

E set(int index, E element): Replaces the element at the specified position with the specified element.

int indexOf(Object o): Returns the index of the first occurrence of the specified element in the list.

int lastIndexOf(Object o): Returns the index of the last occurrence of the specified element.

List<E> subList(int fromIndex, int toIndex): Returns a view of the portion of this list between the specified indices.

void sort(Comparator<? super E> c): Sorts the list using the specified comparator.

2) Set interface does not have own methods.

3) Queue interface's own methods:

boolean offer(E e): Inserts the specified element into the queue if possible without violating capacity restrictions. Returns false if the element can't be added.

E poll(): Retrieves and removes the head of the queue, returning null if the queue is empty.

E peek(): Retrieves, but does not remove, the head of the queue, returning null if the queue is empty.

E remove(): Retrieves and removes the head of the queue, throwing an exception if the queue is empty.

E element(): Retrieves, but does not remove, the head of the queue, throwing an exception if the queue is empty.
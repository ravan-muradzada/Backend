1. Functional Interface

A functional interface in Java is an interface that contains only one abstract method. It's used to represent a single functionality in a more concise way, especially in lambda expressions and method references. Java's Runnable or Comparator interfaces are examples of functional interfaces.

You can create your own custom functional interface using the @FunctionalInterface annotation. This annotation ensures that the interface has only one abstract method.
====================
@FunctionalInterface
interface Greeting {
    void sayHello(String name);
}
====================


2. Creating a Custom Functional Interface

To create your own functional interface, you define an interface with one abstract method and annotate it with @FunctionalInterface. The annotation is optional, but it helps prevent the addition of more abstract methods by mistake.


3. Lambda Functions

A lambda expression in Java is a short way of defining an anonymous function, typically used to implement functional interfaces. It eliminates the need for boilerplate code like anonymous classes.

The syntax of a lambda expression is:
(parameters) -> expression

You can use lambdas to provide an implementation of a functional interface.

Example:
=========================================================
Calculator addition = (a, b) -> a + b;
Calculator subtraction = (a, b) -> a - b;

System.out.println("Addition: " + addition.calculate(10, 5)); // Output: 15
System.out.println("Subtraction: " + subtraction.calculate(10, 5)); // Output: 5
=========================================================

Here, the lambda expressions (a, b) -> a + b and (a, b) -> a - b are implementations of the Calculator functional interface.



4. Method Reference

Method references are a shorthand way of using a method in a lambda expression. If a lambda expression just calls an existing method, you can replace it with a method reference. They make the code more concise and readable.

The syntax of a method reference is:
classname::methodName

There are several types of method references:

-Static Method Reference: ClassName::staticMethod
-Instance Method Reference: instance::method
-Constructor Reference: ClassName::new


Example:

=================================================
// Static method reference
Calculator multiply = Math::multiplyExact;

System.out.println("Multiplication: " + multiply.calculate(10, 5)); // Output: 50
=================================================

Here, Math::multiplyExact is a reference to the static method multiplyExact of the Math class, used in place of a lambda expression.


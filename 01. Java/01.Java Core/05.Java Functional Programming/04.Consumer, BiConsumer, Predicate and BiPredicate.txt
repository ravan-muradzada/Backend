1. Consumer Interface

The Consumer interface in Java represents an operation that accepts a single input and returns no result. It is a functional interface that can be used in lambda expressions or method references.

=======================================================
Consumer<String> print = (s) -> System.out.println(s);
print.accept("Hello, world!");  // Output: Hello, world!
=======================================================
accept(T t): Performs the operation on the given argument.


2. BiConsumer Interface

The BiConsumer interface is similar to Consumer, but it accepts two input arguments and also returns no result. It's useful for operations on pairs of values.

=======================================================
BiConsumer<String, Integer> printNameAndAge = (name, age) -> System.out.println(name + " is " + age);
printNameAndAge.accept("John", 25);  // Output: John is 25
=======================================================
accept(T t, U u): Performs an operation on the two given arguments.


3. Iterator.forEachRemaining()

forEachRemaining() is a default method in the Iterator interface that performs a given action on each remaining element in the iteration.

=======================================================
List<String> list = Arrays.asList("Apple", "Banana", "Cherry");
Iterator<String> iterator = list.iterator();

iterator.forEachRemaining(System.out::println);  // Output: Apple, Banana, Cherry

// Instead we can write it also like this:
iterator.forEachRemaining(fruit->{
    System.out.println(fruit);
});
=======================================================

forEachRemaining(Consumer<? super E> action): Performs the action on each remaining element.


4. Map.forEach()

The Map.forEach() method iterates over the entries in the map and performs a specified action on each key-value pair.

=======================================================
Map<String, Integer> map = new HashMap<>();
map.put("A", 1);
map.put("B", 2);

map.forEach((key, value) -> System.out.println(key + " = " + value));
// Output: A = 1, B = 2
=======================================================
forEach(BiConsumer<? super K, ? super V> action): Performs the given action on each entry in the map.


5. Collection.removeIf()

removeIf() is a method in the Collection interface that removes elements from a collection based on a specified Predicate.

=======================================================
List<Integer> numbers = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5));
numbers.removeIf(n -> n % 2 == 0);  // Removes even numbers
System.out.println(numbers);  // Output: [1, 3, 5]
=======================================================



6. Predicate Interface

The Predicate interface represents a boolean-valued function of one argument. It's often used for filtering or matching conditions.

=======================================================
Predicate<Integer> isEven = (n) -> n % 2 == 0;
System.out.println(isEven.test(4));  // Output: true
=======================================================
test(T t): Evaluates the predicate on the given argument.


7. Predicate.and()

The and() method combines two predicates and returns a composed predicate that tests if both conditions are true.

=======================================================
Predicate<Integer> isEven = (n) -> n % 2 == 0;
Predicate<Integer> isPositive = (n) -> n > 0;

Predicate<Integer> isEvenAndPositive = isEven.and(isPositive);
System.out.println(isEvenAndPositive.test(4));  // Output: true
System.out.println(isEvenAndPositive.test(-4));  // Output: false
=======================================================
and(Predicate<? super T> other): Combines two predicates with logical AND.


8. Predicate.or()

The or() method combines two predicates and returns a composed predicate that tests if at least one of the conditions is true.

=======================================================
Predicate<Integer> isEven = (n) -> n % 2 == 0;
Predicate<Integer> isNegative = (n) -> n < 0;

Predicate<Integer> isEvenOrNegative = isEven.or(isNegative);
System.out.println(isEvenOrNegative.test(-3));  // Output: true
System.out.println(isEvenOrNegative.test(5));  // Output: false
=======================================================


9. Predicate.negate()

The negate() method returns a predicate that represents the logical negation of the current predicate.

=======================================================
Predicate<Integer> isEven = (n) -> n % 2 == 0;
Predicate<Integer> isOdd = isEven.negate();

System.out.println(isOdd.test(3));  // Output: true
=======================================================


10. Predicate.isEqual()

The isEqual() method returns a predicate that tests if two objects are equal based on Objects.equals().

=======================================================
Predicate<String> isHello = Predicate.isEqual("Hello");
System.out.println(isHello.test("Hello"));  // Output: true
System.out.println(isHello.test("World"));  // Output: false
=======================================================


11. Predicate.not()

The not() method is a static method introduced in Java 11 that negates a given predicate.

=======================================================
Predicate<String> isEmpty = String::isEmpty;
Predicate<String> isNotEmpty = Predicate.not(isEmpty);

System.out.println(isNotEmpty.test("Hello"));  // Output: true
=======================================================


12. BiPredicate Interface

The BiPredicate interface is like Predicate, but it accepts two arguments instead of one.

=======================================================
BiPredicate<String, Integer> isStringLengthEqual = (s, i) -> s.length() == i;
System.out.println(isStringLengthEqual.test("Hello", 5));  // Output: true
=======================================================

Part 1: Java I/O Interview - Questions and Answers
WHAT TYPES OF I/O STREAMS ARE THERE?



I/O streams are used to transfer data to file streams, to the console, or to network connections. There are two kinds of I/O streams: byte and character.





WHAT IS THE DIFFERENCE BETWEEN I/O AND NIO?



I / O (input / output, input-output) - the interaction between the information processor and its provider and / or recipient. Input is the signal or data received by the handler, and output is the signal or data sent by (or from) it.



NIO (/*in the context of Java*/ Non-blocking I/O, New I/O) is a collection of application programming interfaces for the Java language designed to implement high-performance I/O operations.





WHAT FEATURES OF NIO DO YOU KNOW?



Key features of NIO:

Channels and Selectors: NIO supports various types of channels. A pipe is an abstraction of lower-level file system objects (such as memory-mapped files and file locks) that allow data to be transferred at a faster rate. Channels are non-blocking, and therefore Java provides other tools such as a selector, which allows you to choose a ready channel for data transfer, and a socket, which is a tool for blocking.

Buffers: Java 7 introduced buffering for all primitive wrapper classes (except Boolean). An abstract Buffer class has appeared, which provides operations such as clear, flip, mark, etc. Its subclasses provide methods for getting and setting data.

Encodings: Java 7 introduced encodings (java.nio.charset), encoders and decoders for displaying Unicode bytes and characters.







NAME THE MAIN CLASSES OF I/O STREAMS.



Byte streams: java.io.InputStream, java.io.OutputStream;

Character streams: java.io.Reader, java.io.Writer;







HOW ARE OUTPUTSTREAM, INPUTSTREAM, WRITER AND READER DIFFERENT?



The OutputStream class is an abstract class that defines streaming byte output. This category contains classes that define whether your data is going into a byte array (but not directly to a String; you are supposed to be able to create it from a byte array), to a file, or to a pipe.



The base class InputStream represents classes that receive data from various sources:

byte array

string

file

channel (pipe): data is placed at one end and retrieved from the other

a sequence of different streams that can be combined into a single stream

other sources (for example, internet connection)



Character streams have two main abstract classes, Reader and Writer, that manage streams of Unicode characters. The Reader class is an abstract class that defines character stream input. The Writer class is an abstract class that defines character stream output. In case of errors, all methods of the class throw an IOException.





WHICH SUBCLASSES OF THE INPUTSTREAM BASE CLASS DO YOU KNOW WHAT THEY ARE FOR?



Popular Subclasses of the base InputStream class:

StringBufferInputStream - turns a string (String) into an InputStream.

SequenceInputStream - merges two or more InputStreams into a single stream.

PushbackInputStream - an input stream that supports a one-byte return to the input stream.

PipedInputStream - implements the concept of an input channel.

ObjectInputStream - input stream for objects.

InputStream is an abstract class that describes an input stream.

FilterInputStream is an abstract class that provides an interface for add-on classes that add useful properties to existing streams.

FileInputStream - for reading information from a file.

DataInputStream - An input stream that includes methods for reading standard Java data types.

ByteArrayInputStream - allows you to use an in-memory buffer (byte array) as the data source for the input stream.

BufferedInputStream - buffered input stream.







WHAT DO YOU KNOW ABOUT RANDOMACCESSFILE?



RandomAccessFile is a class that inherits directly from Object and does not inherit from the I/O base classes above. Designed to work with files, supporting random access to their contents.



Working with the RandomAccessFile class is similar to using the DataInputStream and DataOutputStream streams combined in the same class (they implement the same DataInput and DataOutput interfaces). In addition, the seek() method allows you to move to a specific position and change the value stored there.



When using RandomAccessFile, you need to know the structure of the file. The RandomAccessFile class contains methods for reading and writing UTF-8 primitives and strings.







WHAT FILE ACCESS MODES DO RANDOMACCESSFILE HAVE?



RandomAccessFile can be opened in read ("r") or read/write ("rw") mode. There is also an "rws" mode where the file is opened for read/write operations and every change to the file's data is immediately written to the physical device.





WHICH SUBCLASSES OF THE BASE CLASS OUTPUTSTREAM DO YOU KNOW WHAT THEY ARE FOR?



The OutputStream class is an abstract class that defines streaming byte output.

This category contains classes that define whether your data is going to a byte array (but not directly to a String; you are supposed to be able to create it from a byte array), to a file, or to a pipe.



Subclasses of the base class OutputStream:

PipedOutputStream - implements the concept of an output channel.

ObjectOutputStream - output stream for objects

FilterOutputStream is an abstract class that provides an interface for add-on classes that add useful properties to existing streams.

FileOutputStream - send data to a file on disk. Implementation of the OutputStream class.

DataOutputStream - An output stream that includes methods for writing standard Java data types.

ByteArrayOutputStream - Creates an in-memory buffer. All data sent to this stream is placed in the created buffer.

BufferedOutputStream - buffered output stream.







WHAT IS PUSHBACKINPUTSTREAM USED FOR?



A type of buffering that reads a byte and then returns it to the stream. The PushbackInputStream class provides a mechanism to "look" into the input stream and see what will come from there next time without extracting information.



The class has an additional unread() method.





WHAT IS SEQUENCEINPUTSTREAM USED FOR?



The SequenceInputStream class allows multiple instances of the InputStream class to be chained together. The constructor takes as an argument either a pair of objects of the InputStream class or the Enumeration interface.

During operation, the class makes requests to read from the first object of the InputStream class to the end, and then switches to the second. When using the interface, work will continue on all objects of the InputStream class. When the end of each file is reached, the associated stream is closed. Closing a stream created by an object of the SequenceInputStream class closes all open streams.







WHICH SUBCLASS OF THE READER BASE CLASS DO YOU KNOW WHAT THEY ARE FOR?



Subclasses of the Reader base class:

StringReader is an input stream reading from a string.

Reader is an abstract class that describes character input.

PushbackReader is an input stream that allows characters to be pushed back into the stream.

PipedReader - input channel.

LineNumberReader - an input stream that counts lines.

InputStreamReader - an input stream that translates bytes into characters.

FilterReader - filter reader.

FileReader is an input stream that reads a file.

CharArrayReader - an input stream that reads from a character array.

BufferedReader - buffered input character stream.







WHICH SUBCLASSES OF THE WRITER BASE CLASS DO YOU KNOW WHAT THEY ARE FOR?



Subclasses of the Writer base class:

Writer - an abstract class that describes character output

StringWriter - the output stream writing to the string

PrintWriter - output stream including print() and println() methods

PipedWriter - the output pipe

OutputStreamWriter - output stream that translates bytes into characters

FilterWriter - filter writer

FileWriter - the output stream that writes to the file

CharArrayWriter - the output stream that writes to the character array

BufferedWriter - buffered output character stream


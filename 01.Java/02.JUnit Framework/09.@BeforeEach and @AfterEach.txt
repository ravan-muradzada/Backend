In JUnit 5, @BeforeEach and @AfterEach are annotations used to define methods that run before and after each test method in a test class. They help set up and clean up the testing environment, ensuring that tests are isolated and do not interfere with each other.

@BeforeEach

-Purpose: This annotation is used to indicate that the method should be executed before each test method.

-Use Case: It is commonly used to perform setup tasks, such as initializing objects or preparing the environment needed for the tests.


@AfterEach

-Purpose: This annotation is used to indicate that the method should be executed after each test method.

-Use Case: It is commonly used to perform cleanup tasks, such as releasing resources, closing connections, or resetting states after each test.



Example of usage:

===========================================

class ExampleTest_Add {
    @BeforeEach
    public void messageBeforeEach(){
        System.out.println("Initialized some fields...");
    }

    @Test
    public void addMethodCheck_1(){
        Example e = new Example();
        int resultOfCode = e.add(7, 8);
        int expectedResult = 15;
        assertEquals(expectedResult, resultOfCode);
        // First expected (true) result, then the result
        // of our code.
    }

    @Test
    public void addMethod_2(){
        assertEquals(12, (new Example()).add(8, 4));
        // Short way
    }

    @Test
    public void addMethod3(){
        assertEquals(18, (new Example()).add(10, 8));
    }

    @AfterEach
    public void messageAfterEach(){
        System.out.println("Cleaned fields after each...");
    }
}

===========================================


After running the class, output for this code will be like that:

Initialized some fields...
Cleaned fields after each...
Initialized some fields...
Cleaned fields after each...
Initialized some fields...
Cleaned fields after each...
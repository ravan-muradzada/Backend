Imagine, we have a class in source directory in which there are some method, each does specific functinality.
It is better to use JUnit5 in maven project. So here, default pom.xml file comes.
To be able to use JUnit5 framework, we need to add a dependency to pom.xml file.
For that we need to add 

=========================
<dependencies>

</dependencies>
=========================

And between these we need to add our dependency.

Currently, the newest version of JUnit5 is 5.11.3.

=========================
    <dependency>
        <groupId>org.junit.jupiter</groupId>
        <artifactId>junit-jupiter-api</artifactId>
        <version>5.11.3</version>
        <scope>test</scope>
    </dependency>
=========================

Then we need to have test folder addition to source (src) folder. In src folder, we have the files for application. We write test cases to test folder.
In Maven, test folder is defaultly given. So we don't need to create it manually.

Testing process is also going on the specific class. We create a testing class for each class in source folder.
To create a testing class for application class, we need to open the application class and use this shortcut: "Shift + Ctrl + T".

Then to press "Create new test" and select JUnit5 from here. Mostly, the name for testing class is like that: NameOfAppClass + "Test". Example:
the name of the application class is "Calculator", the testing class for this is like "CalculatorTest".
We can change the name, but it is not recommended.

Then we can write our test cases for all or some methods in the class. Here we create testing methods.
While checking, each testing methods correspond to one test cases.

Imagine we have a application class like:

|=========================|
public class Example {
    public int add(int a, int b){
        return a+b;
    }
}
|=========================|


and we want to create a test for it.
After doing the things I mentioned, something like that will be created:

|=========================|
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class ExampleTest {
    
}
|=========================|


While adding testing methods, compiler needs to understand that it is testing method, and for that we use annotation: "@Test".

We have a method "add" and we can write some testing methods for that:

=================================================
package org.example;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class ExampleTest_Add {
    @Test
    public void addMethodCheck_1(){
        Example e = new Example();
        int resultOfCode = e.add(7, 8);
        int expectedResult = 15;
        assertEquals(expectedResult, resultOfCode);
        // First expected (true) result, then the result
        // of our code.
    }

    @Test
    public void addMethod_2(){
        assertEquals(12, (new Example()).add(8, 4));
        // Short way
    }
}
=================================================


Here "assertEquals" method check whether the expected result is equal to the actual result or not.
Here, we can use other methods, too. Like: 

assertTrue(expectedResult == actualResult) -> This checks whether the argument is "true" or not.

assertArrayEquals(int[] expectedArray, int[] actualArray) -> It checks whether the expected array is equal to actual array or not.

-------------------------------------------------

For multiple methods in the class we can have multiple testing class. For that in application class, we use "Shift + Ctrl + T".

Imagine we have added another method "subtract" to the Example class. The method is like that:

public int subtract(int a, int b){
        return a-b;
    }


The test class for that method might be like that:

=====================================================
class ExampleTestSubtract {
    @Test
    public void subtractMethodCheck_1(){
        Example e = new Example();
        int resultOfCode = e.subtract(7, 12);
        int expectedResult = -5;
        assertEquals(expectedResult, resultOfCode);
    }

    @Test
    public void subtractMethodCheck_2(){
        assertEquals(8, (new Example()).subtract(9, 1));
        // short way
    }
}
=====================================================


For testing class if there are multiple testing methods, we can create just one object of the class as a field of the testing class and use it in each testing method.

The testing method can be anyone of these: public, default and protected. It cannot be private.


-------------------------------------------------

As a coding principle, it is better to declare the method without filling it a specific functinality, then creating some testing methods for that. Then we write the code for this class and try testing methods.
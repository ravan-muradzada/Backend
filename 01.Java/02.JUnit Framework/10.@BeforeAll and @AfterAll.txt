In JUnit 5, @BeforeAll and @AfterAll are annotations used to define methods that run once before all test methods and once after all test methods in a test class, respectively. These annotations are useful for setup and cleanup tasks that are shared across all tests, rather than those that need to run before or after each individual test.

@BeforeAll

-Purpose: This annotation is used to indicate that the method should be executed once before all test methods in the class are executed.

-Use Case: It is commonly used for expensive setup operations, such as initializing shared resources (e.g., database connections, starting servers) that can be reused across tests.



@AfterAll

-Purpose: This annotation is used to indicate that the method should be executed once after all test methods in the class have been executed.
-Use Case: It is commonly used for cleanup tasks that need to be performed after all tests have completed, such as closing connections or releasing resources.


------------------------------------------

Important Notes

-Methods annotated with @BeforeAll and @AfterAll must be static since they are executed at the class level, not at the instance level.
-These annotations are useful for optimizing test execution by avoiding repeated setup and teardown for every single test, which can significantly improve test performance when dealing with expensive operations.

------------------------------------------


===============================================

class ExampleTest_Add {
    @BeforeAll
    public static void messageBeforeAll(){
        System.out.println("Testing for the class has started!");
    }

    @Test
    public void addMethodCheck_1(){
        Example e = new Example();
        int resultOfCode = e.add(7, 8);
        int expectedResult = 15;
        assertEquals(expectedResult, resultOfCode);
        // First expected (true) result, then the result
        // of our code.
    }

    @Test
    public void addMethod_2(){
        assertEquals(12, (new Example()).add(8, 4));
        // Short way
    }

    @Test
    public void addMethod3(){
        assertEquals(18, (new Example()).add(10, 8));
    }

    @AfterAll
    public static void messageAfterAll(){
        System.out.println("Testing for the class has finished!");
    }
}

===============================================
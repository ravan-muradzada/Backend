Part 4: Java Collections Framework Interview - Questions and Answers
WHAT IS THE DIFFERENCE BETWEEN HASHMAP AND IDENTITYHASHMAP? WHAT IS IDENTITYHASHMAP FOR? HOW CAN IT BE USEFUL TO IMPLEMENT SERIALIZATION OR CLONE?



IdentityHashMap is a data structure that implements the Map interface but uses reference comparison instead of the equals() method when comparing keys (values). In other words, in IdentityHashMap, two keys k1 and k2 will be considered equal if the condition k1 == k2 is satisfied.



IdentityHashMap does not use the hashCode() method, which uses the System.identityHashCode(Object) method instead.



Another difference (as a consequence) is the better performance of IdentityHashMap compared to HashMap if the latter stores objects with costly equals() and hashCode() methods.



One of the main requirements for using HashMap is immutability of the key, however, this requirement does not apply to IdentityHashMap, which does not use the equals() and hashCode() methods.



According to the documentation, such a data structure can be used to implement serialization/cloning. To perform such algorithms, the program needs to maintain a table with all references to objects that have already been processed. Such a table should not treat unique objects as equal, even if the equals() method returns true.





WHAT IS THE DIFFERENCE BETWEEN HASHMAP AND WEAKHASHMAP? WHAT IS WEAKHASHMAP FOR?



Before considering WeakHashMap , let me briefly remind you what a WeakReference is.



There are 4 types of references in Java: strong (strong reference), soft (SoftReference), weak (WeakReference) and phantom (PhantomReference). The specifics of each link type are related to the way of how the Garbage Collector works. If the object can only be reached by the WeakReference chain (that is, it is not referenced by strong and soft references), then the object will be marked for deletion.

WeakHashMap is a data structure that implements the Map interface and is based on using a WeakReference to store keys. Thus, the key/value pair will be removed from the WeakHashMap if the key object is no longer strongly referenced.



The following situation can be reviewed as an example of using such a data structure: let’s imagine that there are objects that need to be expanded with additional information, while changing the class of these objects is undesirable or impossible. In this case, we add each object to WeakHashMap as a key, and as a value - the desired information. Thus, as long as the object has a strong reference (or soft one), you can check the hash table and extract information. Once the object is removed, the WeakReference for that key will be placed in the ReferenceQueue and then the corresponding entry for that weak reference will be removed from the WeakHashMap.





COMPARE JAVA.UTIL.QUEUE AND JAVA.UTIL.DEQUE INTERFACES.



According to the documentation Deque ("Dec", Double Ended Queue) is a linear collection that supports the insertion / extraction of elements from both ends. In addition, implementations of the Deque interface can be built according to the FIFO or LIFO principle.



Queue is usually (but not necessarily) built according to the FIFO (First-In-First-Out) principle - accordingly, an element is extracted from the beginning of the queue, an element is inserted - to the end of the queue. This principle is violated, for example, by the priority queue (PriorityQueue), which uses the passed comparator when inserting a new element, or the arrangement of elements is carried out according to natural ordering.



Deque extends Queue.



The implementations of both Deque and Queue generally do not override the equals() and hashCode() methods based on the comparison of the stored elements. Instead, inherited methods of the Object class based on reference comparison are used.







WHY DOES LINKEDLIST IMPLEMENT BOTH LIST AND DEQUE?



LinkedList allows you to add elements to the beginning and end of the list in constant time, which is well suited for implementing the Deque interface (unlike, for example, ArrayList).





WHAT IS THE DIFFERENCE BETWEEN THE JAVA.UTIL.ARRAYS AND JAVA.LANG.REFLECT.ARRAY CLASSES?



java.util.Arrays is a class containing static methods for working with arrays, such as searching through an array and sorting it.

java.lang.reflect.Array - a class for working with arrays when using reflection. Reflection is a mechanism that allows you to examine data about the program during its execution.



WHAT IS THE DIFFERENCE BETWEEN THE JAVA.UTIL.COLLECTION AND JAVA.UTIL.COLLECTIONS CLASSES?



The java.util.Collections class contains only static methods for working with collections. They include methods that implement polymorphic algorithms (those algorithms that can be used with different types of data structures), "wrappers" that return a new collection with the specified data structure encapsulated, and some other methods.



java.util.Collection is the root interface of the Java Collections Framework. This interface is mainly used where a high level of abstraction is required, such as in the java.util.Collections class.







WHAT IS “FAIL-FAST BEHAVIOR”?



Fail-fast behavior means that when an error or condition occurs that could lead to an error, the system immediately stops further work and notifies about it.



In the Java Collections API, iterators can either use fail-fast or fail-safe behavior, or be weakly consistent. An iterator with fail-fast behavior will throw a ConcurrentModificationException if the collection has been modified since it was created, i.e. an element is added or removed (without using the iterator's remove() method). The implementation of this behavior is carried out by counting the number of modifications of the collection (modification count):

when changing the collection (deleting/adding an element), the counter is incremented;

when creating an iterator, the current value of the counter is passed to it;

each time the iterator is accessed, the stored value of the counter is compared with the current value, and if they do not match, an exception is thrown.



Using the fail-fast approach avoids non-deterministic program behavior over time. It's also worth noting that fail-fast behavior cannot be absolutely guaranteed.





IS THERE A SPECIAL CLASS JAVA.UTIL.ENUMSET FOR ENUMS? WHY? WHY DID THE AUTHORS ARE NOT SATISFIED WITH HASHSET OR TREESET?



EnumSet is a variation of the implementation of the Set interface for use with enums (Enum). EnumSet uses an array of bits to store values ​​(bit vector), which allows for high compactness and efficiency. The data structure stores objects of only one Enum type, which is specified when an EnumSet instance is created. All basic operations are performed in constant time (O(1)) and are generally somewhat faster (though not guaranteed) than their counterparts in the HashSet implementation. Bulk operations (like containsAll() and retainAll()) are very fast if their argument is an instance of type Enum.



In addition, the EnumSet class provides many static initialization methods for easy and convenient instantiation.



Iteration over the EnumSet is carried out according to the order in which the enumeration elements are declared.


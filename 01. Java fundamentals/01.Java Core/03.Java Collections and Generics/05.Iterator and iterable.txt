1) Iterable:

Iterable is an interface in Java that represents a collection of elements that can be iterated over. It is the root interface for all collection types that can return an Iterator. The Iterable interface requires implementing a single method: iterator(), which returns an Iterator for the collection.

Common Uses: Any class that implements Iterable (like List, Set, etc.) can be used in a for-each loop.


2) Iterator:

An Iterator is an object that provides methods to iterate over a collection one element at a time. It allows the caller to traverse a collection without exposing its internal structure.

Important Methods:
-hasNext(): Returns true if the iteration has more elements.

-next(): Returns the next element in the iteration.

-remove(): Removes the last element returned by the iterator (optional).

=============================================

// Example of iterator:

public class Main{
    public static void main(String[] __argc__){
        List<String> list = new ArrayList<>(Arrays.asList("apple", "banana", "orange"));
        Iterator<String> iterator = list.iterator();

        while (iterator.hasNext()){
            System.out.println(iterator.next());
        }
    }
}

=============================================

-----------------------------------------------------

Iterators can throw the following exceptions:

NoSuchElementException: Thrown by the next() method if you try to retrieve an element when none are left in the iteration.
Example code:
'
Iterator<String> it = Collections.emptyList().iterator();
it.next(); // Will throw NoSuchElementException
'

UnsupportedOperationException: Thrown if the remove() method is not supported by the underlying collection or iterator.
Example code:
'
List<String> list = Arrays.asList("apple", "banana");
Iterator<String> it = list.iterator();
it.remove(); // Will throw UnsupportedOperationException
'

-----------------------------------------------------

Fail-Fast Iterator

A fail-fast iterator detects structural modifications of the collection while iterating and throws a ConcurrentModificationException when such modification occurs. Structural modifications include adding, removing, or updating elements directly from the collection (not via the iterator).
(The iterator keeps a modification count (modCount). If the modCount of the iterator doesn't match the collection's modCount, the iterator fails.)

-----------------------------------------------------

Fail-Safe Iterator

Fail-safe iterators allow modifications to the collection without throwing exceptions. Instead of iterating over the actual collection, they iterate over a copy of the collection. These are typically used in concurrent collections such as CopyOnWriteArrayList, ConcurrentHashMap, etc.
(The process goes on the previous collection, but after the loop the collection is updated to new one.)

-----------------------------------------------------

Weakly Consistent Iterator

A weakly consistent iterator doesn't throw ConcurrentModificationException and guarantees some level of consistency when the collection is modified during iteration. It reflects changes made to the collection after the iterator is created, but it doesn't guarantee to reflect all changes.

Examples of weakly consistent iterators are found in ConcurrentHashMap, ConcurrentLinkedQueue, etc.

-----------------------------------------------------

ListIterator

ListIterator is a specialized Iterator for List implementations. It provides additional functionality for bidirectional traversal (forward and backward) and allows modifications during iteration.

Important Methods:
-hasNext(), next(): Same as Iterator.

-hasPrevious(), previous(): Traverse backward.

-add(E e): Inserts the specified element into the list.

-set(E e): Replaces the last element returned by next() or previous().

=============================================

// Example of iterator:

public class Main{
    public static void main(String[] __argc__){
        List<String> list = new ArrayList<>(Arrays.asList("apple", "banana", "orange"));
        ListIterator<String> listIterator = list.listIterator();

        // Traverse forward
        while (listIterator.hasNext()) {
            System.out.println(listIterator.next());
        }

        // Traverse backward
        while (listIterator.hasPrevious()) {
            System.out.println(listIterator.previous());
        }

    }
}

=============================================

FileReader in Java is a class used to read data from files in the form of characters rather than bytes. It is part of the java.io package and is designed for reading text files. It is ideal for reading files that contain human-readable characters, like plain text files.


Key Features of FileReader:

-Character Stream: Unlike FileInputStream, which reads raw bytes, FileReader reads the file content as characters, making it useful for text files.
-Encoding: It reads characters based on the default character encoding of the operating system, but you can use InputStreamReader with a specific encoding if needed.
-File Handling: It can handle various text file operations such as reading line-by-line or character-by-character.


Common Constructors:

-FileReader(String fileName): Creates a FileReader object to read from a file specified by its name.
-FileReader(File file): Creates a FileReader object to read from a File object.


Key Methods in FileReader:

-int read(): Reads a single character and returns it as an integer. It returns -1 when the end of the file is reached.
-int read(char[] cbuf): Reads characters into a character array. It returns the number of characters read or -1 if the end of the file is reached.
-void close(): Closes the FileReader and releases any system resources associated with it.


===============================================
public static void main(String[] args) throws IOException {
        FileReader fr = new FileReader("myfile.txt");

        int ch;

        while ((ch = fr.read()) != -1){
            System.out.print((char) ch);
        }

        if (fr != null)
            fr.close();
    }
===============================================


===============================================
public static void main(String[] args) throws IOException {
        FileReader fr = new FileReader("myfile.txt");
        char[] buffer = new char[1024];
        int chrRead;
        while ((chrRead = fr.read(buffer)) != -1){
            System.out.println(new String(buffer, 0, chrRead));
        }
        if (fr != null)
            fr.close();
    }
===============================================



------------------------------------------------------

FileReader uses the default encoding of the platform, which can cause problems when working with files that use different encodings (e.g., UTF-8, ISO-8859-1). If you need to specify a particular encoding, itâ€™s better to use InputStreamReader along with FileInputStream, as shown below:

===============================================
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.io.IOException;

public class InputStreamReaderExample {
    public static void main(String[] args) throws IOException {
        // Specify encoding as UTF-8
        InputStreamReader isr = new InputStreamReader(new FileInputStream("example.txt"), "UTF-8");

        int character;
        while ((character = isr.read()) != -1) {
            System.out.print((char) character);
        }

        isr.close();
    }
}
===============================================
FileInputStream is a Java class used to read raw byte data from files. It is part of the byte stream family in Java, meaning it reads data byte by byte. It is commonly used for reading binary data such as images, audio, and other non-text files, but can also be used to read text files at a lower level.

Key Points:

-Reads binary data: It reads files as a stream of bytes. You can read both text and binary files using FileInputStream, but for text files, FileReader or BufferedReader might be more appropriate.

-Part of the InputStream hierarchy: It extends the InputStream class, which provides methods for reading bytes from any input source.

-Single-byte or byte array reading: You can read data one byte at a time or in chunks using a byte array buffer.

How to Use FileInputStream?

-Opening a File: You need to provide the file path to the FileInputStream constructor.

-Reading Data: You can read data using the read() method, which returns the next byte of data from the input stream.

-Closing the Stream: It's important to close the file input stream after reading, to free up system resources. The close() method does that, or you can use the try-with-resources statement, which automatically closes the stream.

--------------------------------------------------------

Common Methods of FileInputStream:

-int read():

Reads the next byte of data from the file.
Returns the byte as an int value (0 to 255). If the end of the file is reached, it returns -1.

-int read(byte[] b):

Reads up to b.length bytes into the byte array b.
Returns the number of bytes read, or -1 if the end of the file is reached.

-long skip(long n):

Skips over and discards n bytes of data from the input stream.
Returns the actual number of bytes skipped.

-int available():

Returns an estimate of the number of bytes that can be read from the input stream without blocking.

-void close():

Closes the input stream and releases any system resources associated with it.


---------------------------------------

=================================================
import java.io.FileInputStream;
import java.io.IOException;

public class MultipleMethodThrowsExample {

    public static void main(String[] args) throws IOException {
        readFile();
    }

    public static void readFile() throws IOException {
        FileInputStream fis = null;
        fis = new FileInputStream("example.txt");

        int byteData;
        while ((byteData = fis.read()) != -1) {
            System.out.print((char) byteData);
        }

        if (fis != null) {
            fis.close();
        }
    }
}
=================================================


=================================================
    FileInputStream fis = new FileInputStream("myfile.txt");
        byte[] buffer = new byte[1024];
        int bytesRead;
        String data;
        while ((bytesRead = fis.read(buffer)) != -1){
            data = new String(buffer, 0, bytesRead);
            System.out.print(data);
        }
        // Loop just iterates once, because the char count in the file is
        // less than 1024.
=================================================
In Java, creating a new thread means to create a class for that and start this thread.
To give being a thread permission to a class, we have some methods.

1) The first and most used method to create a thread is extending "Thread" class from our class and create a specific method inside our class called "public void run(){}". Inside thiw method we need to write the code related to what our new thread should do.

Syntax for that:

==========================================================================

// Our thread class
public class MyThread extends Thread{
    public void run(){
        for (int i = 0; i < 100; ++i){
            System.out.println("Hello world");
        }
    }
}

public class Main{
    public static void main(String[] argc){
        MyThread m = new MyThread();

        m.start(); // If we want to start the thread 
    }
}

==========================================================================


2) The first method can have some disadvantages in the specific cases. Such us, if our thread class need to extend another class, we cannot use the first method, because in Java, a class can extend only one class, so extending both "Thread" class and another class here is not possible.

Because of this problem, we have another method to create a thread. Instead of extending "Thread" class, we can simply implement "Runnable" interface. (Thread class itself implements this interface).

==========================================================================

class MyThread implements Runnable{
    public void run() {
        System.out.println("Thread is running");
    }
}

public class Main{
    public static void main(String[] argc){
        Thread t = new Thread(new MyThread);
        // We need to create an object of "Thread" class 
        // and send it an object of our class as constructor parameter.

        t.start(); // If we want to start our thread
    }
}

==========================================================================


3) The third method is similar to the second one. This method is used when we need to create just one thread proper to this class, not anymore. So, instead of creating standard class, we create anonymous class.


==========================================================================

public class Main{
    public static void main(String[] argc){
        Runnable r = new Runnable(){
            public void run(){
                System.out.println("Thread is running");
            }
        };

        Thread t = new Thread(r);

        t.start() // If you want to start the thread
    }
}

==========================================================================


4) Another method is another version of the third method:

==========================================================================

public class main{
    public static void main(String[] args) {
        Thread t = new Thread(new Runnable() {
            @Override
            public void run() {
                System.out.println("Thread is running!");
            }
        });

        t.start(); // To start the thread
    }
}

==========================================================================


5) While creating anonymous class, we can use lambda expressions.


==========================================================================
public class main{
    public static void main(String[] args) {
        Runnable r = () ->
        {
            System.out.println("Thread is running");
        };

        Thread t = new Thread(r);

        t.start();
    }
}
==========================================================================


6) The last method is another version of the fifth method.

==========================================================================
public class main{
    public static void main(String[] args) {
        Thread t = new Thread(() -> {
            System.out.println("Thread is running");
        });

        t.start();
    }
}
==========================================================================